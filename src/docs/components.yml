components:
  schemas:
    Booking:
      type: object
      properties:
        userId:
          type: string
        fieldId:
          type: string
        bookingDate:
          type: string
        bookingStatus:
          type: string
          enum: ['CONFIRMED', 'CANCELLED', 'RESERVED']
        paymentStatus:
          type: string
          enum: ['PAID', 'UNPAID']
        startTime:
          type: string
        endTime:
          type: string
      example:
        userId:  '61eff899c53549003313d079'
        fieldId: '61eff899a648348787287171'
        bookingDate: '31-01-2022'
        bookingStatus: 'CONFIRMED'
        paymentStatus: 'UNPAID'
        startTime:  '8:00'
        endTime: '10:00'

    Field:
      type: object
      properties:
        id:
          type: string
        fieldName:
          type: string
        fieldType:
          type: string
          enum: ['Regular', 'VIP']
        price:
          type: string
        timeslots:
          type: array
        desc:
          type: string
        imgUrl:
          type: string
      example:
        id: 5ebac534954b54139806c112
        fieldName: L1
        fieldType: Regular
        price: 100000
        timeslots: ['8-10', '10-12']
        desc: Regular badminton field
        imgUrl: none

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Payment:
      type: object
      properties:
        amount:
          type: number
        name:
          type: string
        email:
          type: string
        phone:
          type: number
        userId:
          type: string
        fieldId:
          type: string
        bookingId:
          type: string
        transactionStatus:
          type: string
          enum: ['PENDING', 'SUCCESS', 'FAILED', 'EXPIRED', 'TIMEOUT', 'REDIRECT']
        paymentStatus:
          type: string
          enum: ['PAID', 'UNPAID']
      example:
        amount: 100000
        name:   'John Doe'
        email:  'john.doe@gmail.com'
        userId: '61eff899c53549003313d079'
        fieldId: '61eff899a648348787287171'
        bookingId: '61eff899a648348787287171'
        transactionStatus: 'PENDING'
        paymentStatus: 'UNPAID'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
